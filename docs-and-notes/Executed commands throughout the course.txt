Executed commands stack (recent-to-old top-to-bottom sorting order)

#24 (Docker-related) Rebuild all images and run them from the beginning
docker-compose up -d --build
docker-compose up -f docker-compose.yml -f docker-compose.override.yml -d --build

#23 (Docker-related) Run a Postgres database in docker container
docker run -d -e POSTGRES_USER=admin1234 -e POSTGRES_PASSWORD=admin -e POSTGRES_DB=discountdb -p 5432:5432 --name discountdb postgres

#22 (Postgres-related) UUID generator component AND Coupon table DDL script:

	-- Drop table
	DROP TABLE IF EXISTS Coupon;

	CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

	CREATE TABLE public.coupon (
		id uuid NULL DEFAULT uuid_generate_v4(),
		productname varchar(50) NOT NULL,
		description varchar(256) NULL,
		discount numeric(1000, 2) NULL
	);

#21 (Postgres-related) DiscountAPI database connection string:
	Server=localhost;Port=5432;Database=DiscountDb;User Id=admin1234;Password=admin

#20 (Basket.API-related -> Package Manager Console window) It updates all existing packages in the project!
Update-Package -ProjectName Basket.API

#19 (Redis-related) Redis CLI commands
   redis-cli (initial command)
   ping (check the server is up and running)
   set [key] [value] (add a key-value pair to redis)
     ex: set userId cristiano.dias
   get [key] (retrieve a key-value pair from redis)
     ex: get userId

#18 (Docker-related) Interact to redis via terminal
docker exec -it shopping-redis /bin/bash

#17 (Docker-related) Log redis server for troubleshooting
docker logs -f shopping-redis

#16 (Docker-related) Run a Redis database in docker container
docker run -d -p 6379:6379 --name shopping-redis redis:alpine

#15 (Docker-related) Remove all unnamed images:
docker system prune

#14 (Docker-related) Remove all images:
docker rmi $(docker images -q)

#13 (Docker-related) Remove all running containers:
docker rm $(docker ps -aq)

#12 (Docker-related) Stop all running containers:
docker stop $(docker ps -aq)

#11 (Docker-related) Stop a docker composition:
  Head to the folder where the docker-compose.yml is located then run:
  docker-compose down

#10 (Docker-related) Run a docker composition:
  Head to the folder where the docker-compose.yml is located then run:
  docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d

#9 (Docker-related) Stop a determined container:
docker ps -a
  With the container ID, use this command:
docker stop 1234a [i.e. the containerID]

#8 (Docker-related) Use this command to (re)start a docker container:
docker ps -a 
  With the container ID, use this command:
  docker start 1234a [i.e. the containerID]

#7 (Catalog.API-related -> Package Manager Console window) It updates all existing packages in the project!
Update-Package -ProjectName Catalog.API

#6 (Docker-related) EXTRA: Get further infrastructure details about the running container. Here's the command:
docker inspect shopping-mongo

#5 (MongoDb-related) Catalog API database connection string:
	mongodb://localhost:27017/CatalogDb?readPreference=primary&appname=MongoDB%20Compass&directConnection=true&ssl=false

#4 (MongoDb-related) Mongo CLI commands
   ls (directory navigation command)
   mongo (starts mongo shell for mongo-specific commands)
	 use CatalogDb => creates a new database called CatalogDb
	 show dbs => displays all currently available databases
	 db.createCollection('Products') => (creates a new collection called 'Products' inside CatalogDb database)
	 show collections => displays all collections databases inside CatalogDb database. (If nothing is displayed, try 'use CatalogDb' [ENTER] then try again)
	 db.Products.insertMany([{ "A": 1, "B":2, "N": 1000" }]) => inserts N documents into Products collection at once
	 db.Products.find({}).pretty() => lists documents from Products collection (note that no filters were applied)
	 db.Products.remove({}) => removes all documents from the Products collection (note that no filters were applied)

#3 (Docker-related) Navigate to container's /bin/bash folder in an interactive mode (so you can execute some mongo CLI commands in it, for instance)
docker exec -it shopping-mongo /bin/bash

#2 (Docker-related) Get Mongo database logs
docker logs -f shopping-mongo

#1 (Docker-related) Run a Mongo database in docker container
docker run -d -p 27017:27017 --name shopping-mongo mongo

	You can also specify a volume in which the data will be saved so you can rerun this container without losing its data:
	docker run -d -p 27017:27017 --name shopping-mongo -v /mongodb/data/db mongo (Reference: hub.docker.com/_/mongo/)